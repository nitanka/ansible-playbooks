---
- name: creating an instance in AWS using default VPC and Security Group 
  hosts: 172.30.1.237
  sudo: yes
  vars: 
    instance_info:
      - name: "test server"
        image: "ami-936d9d93" # Ubuntu 14.04
        group_id: 'sg-c495cba1'
        region: 'ap-northeast-1'
        instance_type: 't2.micro'
        #platform: 'test'
        key_name: 'nitanka.gogoi'
        vpc_subnet_id: 'subnet-4a07823d'
  tasks: 
    - name: Creating the instance
      ec2:
        group_id: 'sg-c495cba1'#"{{ item.group_id }}"
        region: "{{ item.region }}"
        aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
        image: '{{ item.image }}'
        instance_type: "{{ item.instance_type }}"
        key_name: "{{ item.key_name }}"
        state: present
        assign_public_ip: true
        instance_tags: 
          Name: Project_test
        vpc_subnet_id: 'subnet-4a07823d'
        wait: yes
      register: ec2
      with_items: instance_info
    - name: Wait for SSH
      wait_for:
        host: "{{ item['instances'][0]['public_ip'] }}"
        port: 22
        delay: 10
        timeout: 320
        state: started
      with_items: ec2.results
    - name: Add hosts group temporary inventory group with pem path
      add_host:
        name: "{{ ec2.results[item.0]['instances'][0]['public_ip'] }}"
        groups: dynamic_hosts
        ansible_ssh_host: "{{ ec2.results[item.0]['instances'][0]['public_ip'] }}"
        ansible_ssh_private_key_file: '/home/ubuntu/nitankagogoi.pem'
        ansible_ssh_user: "ubuntu"
        ec2_vars: "{{ ec2.results[item.0]['instances'][0] }}"
        ec2_instance_ids: "{{ ec2.results[item.0]['instance_ids'] }}"
      with_indexed_items: instance_info
    
- hosts: dynamic_hosts
  name: Install Nginx, MySQL and Java
  vars:
        MySQL_root_pass: root
  sudo: yes
  tasks:
    - name: Create and attach a volumes
      ec2_vol:
         instance: "{{ item.id }}"
         name: my_existing_volume_Name_tag
         volume_size: 1   # in GB
         volume_type: gp2
         device_name: /dev/sdf
         with_items: ec2.results
      register: ec2_vol

    - name: Create and attach a volumes
      name: Configure mount points - mount device by name
      mount: name=/system src=/dev/sda1 fstype=ext4 opts='defaults nofail 0 2' state=present
      mount: name=/data src=/dev/xvdf fstype=ext4 opts='defaults nofail 0 2' state=present

    - name: Install nginx
      apt: 
        name: nginx
        state: latest
        update_cache: yes

    # installing oracle-8-java

    - name: Install add-apt-repostory
      apt: name=software-properties-common state=latest

    - name: Add Oracle Java Repository
      apt_repository: repo='ppa:webupd8team/java'

    - name: Accept Java 8 Licence
      shell: echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | tee /etc/oracle-java-8-licence-acceptance | /usr/bin/debconf-set-selections
      args:
        creates: /etc/oracle-java-8-licence-acceptance

    - name: Install Oracle Java 8
      apt: name={{item}} state=latest
      with_items:
        - oracle-java8-installer
        - ca-certificates
        - oracle-java8-set-default

    # Installation of java is done


    # Installing mysql on the server
    
    - name: Setting root user for the mysql database
      debconf:
        name: 'mysql-server'
        question: 'mysql-server/root_password'
        value: '{{MySQL_root_pass | quote}}'
        vtype: 'password'

    - name: Confirm MySQL root password before installing
      debconf:
         name: 'mysql-server'
         question: 'mysql-server/root_password_again'
         value: '{{MySQL_root_pass | quote}}'
         vtype: 'password'

    - name: Install mysql
      apt:
        package: mysql-server
        update-cache: yes
        state: present

    - name: Copying script to run mysql_secure_install
      copy:
        src: ./mysql.sh
        dest: /home/ubuntu
        mode: u+rwx

    - name: Executing the script
      shell: /home/ubuntu/mysql.sh

    - name: Deleting mysql.sh from the remote machine
      file:
        path: /home/ubuntu/mysql.sh
        state: absent
 
             
      
